


#从demo1和demo2的例子,可以看出
    我发现 适配器类 继承的接口 和 目标类的接口 好像可以不是一个。



#========================================
意图：将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

主要解决：主要解决在软件系统中，常常要将一些"现存的对象"放到新的环境中，而新环境要求的接口是现对象不能满足的。

何时使用：
1、系统需要使用现有的类，而此类的接口不符合系统的需要。
2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，
   包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。
3、通过接口转换，将一个类插入另一个类系中。
  （比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，
    在里面包容一个虎对象，实现飞的接口。）




#========================================
适配器模式（Adapter Pattern），将一个类的接口转换成客户希望的另外一个接口。
适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。

适配器模式可将一个类的接口转换成调用方希望的另一个接口。这种需求往往发生在后期维护阶段，
因此有观点认为适配器模式只是前期系统接口设计缺乏的一种弥补。
从实际工程来看，并不完全这样，有时不同产商的功能类似但接口很难完全一样，
而为了系统使用方式的一致性，也会用到适配器模式。


适配器模式适用场景
调用双方接口不一致且都不容易修改时，可以使用适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
多个组件功能类似，但接口不统一且可能会经常切换时，可使用适配器模式，使得客户端可以以统一的接口使用它们

适配器模式优点
客户端可以以统一的方式使用ConcreteTarget和Adaptee
适配器负责适配过程，而不需要修改待适配类，其它直接依赖于待适配类的调用方不受适配过程的影响
可以为不同的目标接口实现不同的适配器，而不需要修改待适配类，符合开放-关闭原则