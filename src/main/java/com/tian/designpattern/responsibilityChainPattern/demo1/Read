
链接：https://www.jianshu.com/p/9f7d9775bdda

一 不使用 责任链式模式的写法
com.tian.designpattern.responsibilityChainPattern.demo1.LeaveApproval
https://www.jianshu.com/p/068a5f3fe14f


二 责任链模式

概念
责任链，顾名思义，就是用来处理相关事务责任的一条执行链，执行链上有多个节点，
每个节点都有机会（条件匹配）处理请求事务，
如果某个节点处理完了就可以根据实际业务需求传递给下一个节点继续处理或者返回处理完毕。

场景
现实中，请假的OA申请，请假天数如果是半天到1天，可能直接主管批准即可；
如果是1到3天的假期，需要部门经理批准；
如果是3天到30天，则需要总经理审批；
大于30天，正常不会批准。

类图
为了实现上述场景，我们可以采用责任链设计模式。

员工提交请求类：      LeaveRequest。
抽象的请假责任处理类： AbstractLeaveHandler。
直接主管审批处理类：   DirectLeaderLeaveHandler。
部门经理处理类：      DeptManagerLeaveHandler。
总经理处理类：        GManagerLeaveHandler。
员工请求发起申请到抽象的责任处理类中，根据员工的请假天数，对应的处理类完成处理。
每一个责任处理类设置下面的节点。自身处理不了则传递给下一个节点处理。

总结
责任链主要重在责任分离处理，让各个节点各司其职。
责任链上的各个节点都有机会处理事务，但是也可能不会受理请求。
责任链比较长，调试时可能会比较麻烦。
责任链一般用于处理流程节点之类的实际业务场景中。
Spring拦截器链、servlet过滤器链等都采用了责任链设计模式。
