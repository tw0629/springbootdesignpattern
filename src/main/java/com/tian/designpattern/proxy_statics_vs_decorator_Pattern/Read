
真心感觉差不多，就当 使用意义不一样吧。


https://segmentfault.com/a/1190000019355456
共同点：
装饰者与被装饰者，代理类与被代理类，都是继承自同一个接口，可以令他们在被调用时相互替换


不同点：
被装饰者往往被作为装饰者的构造器参数传入装饰者，强调被装饰者功能的增强；
被代理类往往在代理类内部被创建，所以这里用UML里组合的关系，强调对被代理类的访问控制。

装饰者里持有的是被装饰者的接口类型，所以可以装饰所有实现同一接口的类；
代理类是针对某一个具体的类进行代理，所以对每一个类都要实现一个对应的代理类，
这是静态代理模式的局限，可以使用动态代理模式来弥补。

http://www.jasongj.com/design_pattern/proxy_decorator/
从语意上讲，代理模式是为控制对被代理对象的访问，而装饰模式是为了增加被装饰对象的功能
代理类所能代理的类完全由代理类确定，装饰类装饰的对象需要根据实际使用时客户端的组合来确定
被代理对象由代理对象创建，客户端甚至不需要知道被代理类的存在；被装饰对象由客户端创建并传给装饰对象


Java 中使用装饰者模式的一个典型的例子是 I/O 对象的创建，比如创建一个 BufferedInputStream 时：

InputStream in = ...
InputStream input = new BufferedInputStream(in);