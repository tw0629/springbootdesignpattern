

###观察者模式
#demo0
来源：https://mp.weixin.qq.com/s/2UsuJT6iVgMqjdA3wfyC0A
观察者模式是对象的行为模式，又叫发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式。
观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。
观察者模式模型如下：


观察者模式所涉及的角色有：

　　●　　抽象主题(Subject)角色：抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。

　　●　　具体主题(ConcreteSubject)角色：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。

　　●　　抽象观察者(Observer)角色：为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。

　　●　　具体观察者(ConcreteObserver)角色：存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。




#EventBus
###观察者模式
在使用ApplicationEvent和Listener快速实现业务解耦中提到了用Spring提供的观察者设计模式完成系统内部逻辑解耦。
本文将介绍Google-Guava中的一种消息发布-订阅类库——EventBus。
EventBus 是Google.Guava提供的消息发布-订阅类库，它实现了观察者设计模式，消息通知负责人通过EventBus去注册/注销观察者，最后由消息通知负责人给观察者发布消息。
来源:https://www.jianshu.com/p/93486a604c34

EventBus是Guava的事件处理机制，是设计模式中的观察者模式（生产/消费者编程模型）的优雅实现。对于事件监听和发布订阅模式，EventBus是一个非常优雅和简单解决方案。
https://mp.weixin.qq.com/s/2UsuJT6iVgMqjdA3wfyC0A





###EventBus标准流程:

1   新建EventBus对象
    EventBus eventBus = new EventBus("");

2   新建 Listener对象
    EventListener listener = new EventListener();

3   注册Listener对象到EventBus
    eventBus.register(listener);

4   发布事件
    eventBus.post(new Event());

##  com.tian.designpattern.observerPattern.EventBus_demo6
这个模块测试的比较--简单通俗易于理解

## !!!  EventBus.post(new XXXEvent());
## 方便得出: !!!    只要是所有Listener中@Subscribe方法中入参是XXXEvent类型的都会触发！！！
